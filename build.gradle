apply plugin: 'com.github.kt3k.coveralls'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.1.0'
    }
}

allprojects {
    apply plugin: 'base'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
    }
    jacoco {
        toolVersion = '0.7.1.201405082137'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'sonar-runner'
    apply plugin: 'jacoco'
    apply plugin: 'osgi'

    group = 'de.hatoka.offlinepoker'
    version = '0.1.15'
    status = 'development'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    configurations {
        provided
    }
    sourceSets {
        main { compileClasspath += configurations.provided }
    }

    sonarRunner {
        sonarProperties {
            property "sonar.dynamicAnalysis", "reuseReports"
            property "sonar.host.url" , sonarURL
            property "sonar.projectName", "OfflinePoker " + name
            property "sonar.projectKey", "offlinepoker:${name}"
            property "sonar.projectVersion", "0.1"
            property "sonar.java.source", "8"
            property "sonar.java.coveragePlugin", "jacoco"
            property "sonar.jacoco.reportPath", "$buildDir/jacoco/jacocoTest.exec"
        }
    }

    jacocoTestReport {
        reports {
            csv.enabled false
            xml.enabled true
            html.enabled true
            html.destination "${buildDir}/jacoco/html"
        }
    }
    test {
        jacoco {
            destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        }
     }

    jacoco {
        reportsDir = file("$buildDir/jacoco/report")
    }

    jar {
        manifest {
            // the manifest of the default jar is of type OsgiManifest
            name = project.name
            instruction 'Bundle-Description', project.name
            instruction 'Bundle-Vendor', 'Thomas Bergmann'
        }
    }
}

project('de.hatoka.account')
{
    sourceSets {
        main {
          output.resourcesDir = "build/classes/main"
        }
    }

    dependencies {
        compile project(":de.hatoka.common")
        compile project(":de.hatoka.address")
        compile project(":de.hatoka.mail")
        runtime 'javax.mail:mail:1.4.7'

        testCompile 'xmlunit:xmlunit:1.6'
        testCompile 'org.mockito:mockito-all:1.9.5'
        testRuntime 'xalan:xalan:2.7.2'
        testCompile project(":de.hatoka.test")
    }
}

project('de.hatoka.test')
{
    dependencies {
        compile project(":de.hatoka.common")
        compile 'org.eclipse.persistence:eclipselink:2.6.2' // embeddable
        compile 'junit:junit:4.12'
        compile 'org.apache.derby:derby:10.12.1.1'
        compile 'com.google.inject:guice:3.0'
    }
}

project('de.hatoka.address')
{
    dependencies {
        compile project(":de.hatoka.common")
        testCompile project(":de.hatoka.test")
    }
}

project('de.hatoka.common')
{
    dependencies {
        compile 'javax.validation:validation-api:1.1.0.Final'
        compile 'javax.ejb:ejb-api:3.0'
        compile 'org.slf4j:slf4j-api:1.7.9'
        compile 'org.eclipse.persistence:eclipselink:2.5.2' // embeddable
        compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
        compile 'javax.servlet:javax.servlet-api:3.1.0' // HttpServletRequest

        compile 'com.google.inject:guice:3.0'
        compile 'commons-lang:commons-lang:2.+' // RandomUtils
        compile 'commons-io:commons-io:2.+'

        testCompile 'junit:junit:4.12'
        testCompile 'org.apache.tomcat:tomcat-catalina:8.0.20'
        testRuntime 'xalan:xalan:2.7.2'
    }
}

project('de.hatoka.mail')
{
    dependencies {
        compile project(":de.hatoka.common")
        compile 'javax.mail:mail:1.4.7'
        provided 'org.apache.tomcat:tomcat-catalina:8.0.20'
        testCompile project(":de.hatoka.test")
        testCompile 'org.apache.tomcat:tomcat-catalina:8.0.20'
    }
    test {
        // https://javamail.java.net/nonav/docs/api/com/sun/mail/smtp/package-summary.html
        // systemProperty 'SMTP_HOST', mailSmtpHost
        // systemProperty 'SMTP_USER', mailSmtpUser
        // systemProperty 'SMTP_PASSWORD', mailSmtpPassword
        // explicitly include or exclude tests
        exclude 'de/hatoka/mail/internal/service/**'
    }
}

project('de.hatoka.tournament')
{
    sourceSets {
        main {
          output.resourcesDir = "build/classes/main"
        }
    }

    dependencies {
        compile project(":de.hatoka.common")
        compile project(":de.hatoka.address")
        testCompile project(":de.hatoka.test")
        testCompile 'xmlunit:xmlunit:1.6'
        testCompile 'org.mockito:mockito-all:1.9.5'
        testRuntime 'xalan:xalan:2.7.2'
    }
}

project('de.hatoka.offlinepoker')
{
    apply plugin: "war"
    dependencies {
        compile project(":de.hatoka.tournament")
        compile project(":de.hatoka.address")
        compile project(":de.hatoka.account")

        compile 'org.eclipse.jetty:jetty-server:9.3.5.v20151012'
        compile 'org.eclipse.jetty:jetty-servlet:9.3.5.v20151012'
        compile 'org.eclipse.jetty:jetty-webapp:9.3.5.v20151012'

        runtime 'org.apache.commons:commons-dbcp2:2.0.1'
        runtime 'org.postgresql:postgresql:9.3-1102-jdbc4'
        runtime 'xalan:xalan:2.7.2'
        runtime 'org.glassfish.jersey.containers:jersey-container-servlet:2.14'

        testCompile 'junit:junit:4.12'
    }
}

// based on http://www.jroller.com/aalmiray/entry/gradle_glam_jacoco_coveralls
task jacocoReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(fileTree('.').include('**/*.exec').getFiles())
    reports {
        csv.enabled = false
        html.enabled = true
        html.destination "${buildDir}/reports/jacoco/html"
        xml.enabled = true
        xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

defaultTasks 'test', 'war', 'jacocoReport'
